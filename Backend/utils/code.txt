const express = require('express');
const cors = require('cors');
const bodyParser = require('body-parser');
const fetch = require('node-fetch');
const fs = require('fs').promises;
const dotenv = require('dotenv');

dotenv.config();

class KiteApp {
  constructor(apiKey, userId, enctoken) {
    this.apiKey = apiKey;
    this.userId = userId;
    this.enctoken = enctoken;
    this.root = "https://kite.zerodha.com/oms";
    this.headers = {
      "X-Kite-Version": "3",
      'Authorization': `enctoken ${this.enctoken}`,
      'Content-Type': 'application/x-www-form-urlencoded'
    };
    this._routes = {
      place_order: '/orders/amo',
    };
  }

  async _request(route, method, params = null) {
    const uri = this._routes[route];
    if (!uri) throw new Error('Route not found');

    let url = this.root + uri;
    const options = {
      method,
      headers: this.headers,
    };

    if (method === 'POST' || method === 'PUT') {
      options.body = new URLSearchParams(params).toString();
    } else if (params) {
      const queryString = new URLSearchParams(params).toString();
      url += '?' + queryString;
    }

    console.log('Request headers:', this.headers);
    console.log(`Request: ${method} ${url}`);
    console.log('Request body:', options.body);

    try {
      const response = await fetch(url, options);
      const contentType = response.headers.get('content-type');

      if (contentType && contentType.includes('application/json')) {
        const data = await response.json();
        console.log('Response:', data);
        if (data.status === 'error') throw new Error(data.message);
        return data.data;
      } else {
        const text = await response.text();
        console.log('Response:', text);
        throw new Error(`Unexpected response: ${text}`);
      }
    } catch (error) {
      console.error('Request error:', error);
      throw error;
    }
  }

  async placeOrder(params) {
    return this._request('place_order', 'POST', params);
  }
}

const app = express();
const PORT = process.env.PORT || 5000;

app.use(cors());
app.use(bodyParser.urlencoded({ extended: true }));
app.use(bodyParser.json());

const KITE_API_KEY = process.env.KITE_API_KEY; 
let kiteApp;

// Login with credentials function
async function loginWithCredentials(userId, password, twofa) {
  try {
    let response = await fetch('https://kite.zerodha.com/api/login', {
      method: 'POST',
      headers: { 'Content-Type': 'application/x-www-form-urlencoded' },
      body: new URLSearchParams({ user_id: userId, password })
    });

    if (!response.ok) throw new Error("Login failed. Check your credentials.");

    const loginData = await response.json();
    response = await fetch('https://kite.zerodha.com/api/twofa', {
      method: 'POST',
      headers: { 'Content-Type': 'application/x-www-form-urlencoded' },
      body: new URLSearchParams({
        request_id: loginData.data.request_id,
        twofa_value: twofa,
        user_id: loginData.data.user_id
      })
    });
    // Fetching the raw cookies from the response headers
    const cookies = response.headers.raw()['set-cookie'];

    // Finding the enctoken from the cookies
    const tokenValue = cookies.find(cookie => cookie.startsWith('enctoken='));

    // Check if enctoken exists, then split and extract its value
    if (tokenValue) {
        enctoken = tokenValue.replace('enctoken=', '').split(';')[0]
        console.log(enctoken); 
    } else {
        console.error('enctoken not found in cookies');
    }


    await fs.mkdir('utils', { recursive: true });
    await fs.writeFile('utils/enctoken.txt', enctoken);

    return enctoken;
  } catch (error) {
    console.error('Login error:', error);
    throw error;
  }
}

// Login route
app.post('/api/login', async (req, res) => {
  try {
    const { userId, password, twofa } = req.body;
    const enctoken = await loginWithCredentials(userId, password, twofa);
    kiteApp = new KiteApp(KITE_API_KEY, userId, enctoken);
    res.json({ success: true, message: 'Logged in successfully', enctoken });
  } catch (error) {
    res.status(500).json({ success: false, message: error.message });
  }
});

// Place order route
app.post('/api/place-order', async (req, res) => {
  try {
    if (!kiteApp) throw new Error('Not logged in. Please login first.');

    console.log('Order Request Body:', req.body);

    const orderParams = {
      exchange: req.body.exchange,
      tradingsymbol: req.body.symbol,
      transaction_type: req.body.transactionType,
      quantity: req.body.quantity,
      product: 'CNC',
      order_type: req.body.orderType,
      validity: 'DAY',
    };

    if (req.body.orderType === 'LIMIT' && req.body.price) {
      orderParams.price = req.body.price;
    }

    const orderResponse = await kiteApp.placeOrder(orderParams);
    res.json({ success: true, data: orderResponse });
  } catch (error) {
    console.error('Error placing order:', error);
    res.status(500).json({ success: false, message: error.message });
  }
});

const AuthController = require('./Controllers/AuthController');
app.use('/api/auth', AuthController);

app.listen(PORT, () => {
  console.log(`Server running on port ${PORT}`);
});






// Python Testing 


import logging
import requests
import os
from time import sleep
from kiteconnect import KiteConnect
import kiteconnect.exceptions as ex

# Configure logging
logging.basicConfig(level=logging.DEBUG)
log = logging.getLogger(__name__)

class AlphaVantage:
    def __init__(self, api_key):
        self.api_key = api_key
        self.base_url = "https://www.alphavantage.co/query?"

    def fetch_rsi(self, symbol, interval="daily", time_period=14, series_type="close"):
        params = {
            "function": "RSI",
            "symbol": symbol,
            "interval": interval,
            "time_period": time_period,
            "series_type": series_type,
            "apikey": self.api_key.strip("+")
        }

        url = self.base_url + '&'.join([f"{key}={value}" for key, value in params.items()])
        
        response = requests.get(url)

        data = response.json()

        if "Technical Analysis: RSI" in data:
            latest_date = list(data["Technical Analysis: RSI"].keys())[0]
            latest_rsi = data["Technical Analysis: RSI"][latest_date]["RSI"]
            log.info(f"RSI for {symbol} on {latest_date}: {latest_rsi}")
            return float(latest_rsi)
        else:
            log.error(f"Failed to fetch RSI data: {data}")
            raise Exception(f"Error fetching RSI for {symbol}")

class KiteApp(KiteConnect):
    def __init__(self, api_key, userid, enctoken):
        super().__init__(api_key=api_key)  # Pass the API key here
        self.userid = userid
        self.enctoken = enctoken
        self.set_access_token(enctoken)

    def place_kite_order(self, tradingsymbol, transaction_type, quantity='1', variety="amo", exchange="NSE"):
        try:
            order_id = self.place_order(
                tradingsymbol=tradingsymbol,
                transaction_type=transaction_type,
                quantity=quantity,
                variety=variety,  # Added variety
                exchange=exchange,
                product="CNC",  # Uncomment if needed
                order_type="MARKET"  # Uncomment if needed
            )
            if order_id:
                log.info(f"Order placed successfully. Order ID: {order_id}")
            else:
                log.warning("Order placement returned None.")
            return order_id
        except ex.InputException as e:
            log.error(f"Input error during order placement: {e}")
        except ex.OrderException as e:
            log.error(f"Order error: {e}")
        except Exception as e:
            log.error(f"Failed to place order: {e}")

def login_with_credentials(userid, password):
    reqsession = requests.Session()
    
    r = reqsession.post('https://kite.zerodha.com/api/login', data={
        "user_id": userid,
        "password": password
    })

    if r.status_code != 200:
        raise Exception("Login failed. Check your credentials.")

    r = reqsession.post('https://kite.zerodha.com/api/twofa', data={
        "request_id": r.json()['data']['request_id'],
        "twofa_value": input("Enter the 2FA code: "),
        "user_id": r.json()['data']['user_id']
    })

    enctoken = r.cookies.get('enctoken')

    if not enctoken:
        raise Exception("Failed to get enctoken. Check login process.")

    os.makedirs('utils', exist_ok=True)
    with open('utils/enctoken.txt', 'w') as wr:
        wr.write(enctoken)

    return enctoken

def main():
    ALPHA_VANTAGE_API_KEY = 'W60I97T1F0G8XOW6'
    KITE_API_KEY = 'your_kite_api_key'  # Add your Kite API key here
    SYMBOL = 'AAPL'
    av = AlphaVantage(api_key=ALPHA_VANTAGE_API_KEY)

    USER_ID = 'OJF708'
    PASSWORD = 'rushabh1610'

    try:
        enctoken = login_with_credentials(USER_ID, PASSWORD)
        kite_app = KiteApp(api_key=KITE_API_KEY, userid=USER_ID, enctoken=enctoken)

        while True:
            rsi = av.fetch_rsi(symbol=SYMBOL)

            if rsi < 70:  # Example RSI threshold
                kite_app.place_kite_order(tradingsymbol='AAPL', transaction_type='BUY', quantity=1)

            log.info("Sleeping for 1 hour before next check...")
            sleep(3600)

    except Exception as e:
        log.error(f"Error in strategy: {e}")

if __name__ == "__main__":
    main()
